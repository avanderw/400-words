2019-09-16 10:58: As of today I am furious with the current state of releases. I would love to talk about this now, however I will use this platform to talk about what was left hanging in the previous 400 words. Previously, we left off with the statement that duplication is not an evil and that it may be beneficial in stead of adding in a dependency to manage.

There are various ways in which you can look at this. That adding a dependency means that you need to manage versions of that dependency. If you do not manage the versions of the dependency, then you add volatility to your code that you may not be in control of. In addition, when you own the code and the dependency is a high frequency of change due to the modality of it not being well defined. Then the addition of risk is large. Fixing that dependency is one way to deal with the scope of change, thought that means you have to do dependency management in that form. If the functionality is your own and it is relatively easy to maintain, then I advocate that the classes be duplicated. This localizes any of the changes. This in turn means that any custom work can be done as it should be easy to do and can be made safely, in that it will not affect another project that includes the work as a dependency.

In large systems the complexity of dependency management can cripple the new initiatives that are planned. In addition, they make bug-fixing more complicated. From experience, the best is to introduce dependencies only on tightly scoped business units. Kind of like product services (which are bound by the product scope). Though there is considerable cases out there that highlight the new movement towards micro-services and how the complexity is not in the changing system, but in the dependencies introduced between micro-services. This is similar to the concept of one project having multiple dependencies on other projects that themselves have various dependencies. The complexity arises in how to find circular dependencies, it should be obvious why this is a bad thing. In addition, it makes things difficult when changing interfaces on modules that are tightly coupled.

Version management of the interfaces are similar to version control of dependencies. However, tools are definitely required to assist with this management and I am unfamiliar with what tools are available in the micro-service space. What I do know is that there needs to be significant value to create a dependency from my own experience than to not duplicate. I completely understand that this needs to be weighed against the benefits of making a single change to fix a bug and all systems are affected, but often bug-fixes require serious changes from my understanding in enterprise software. They are often use-case specific and will not realize on other consumers.